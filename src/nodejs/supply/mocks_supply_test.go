// Automatically generated by MockGen. DO NOT EDIT!
// Source: supply.go

package supply_test

import (
	libbuildpack "github.com/cloudfoundry/libbuildpack"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerRecorder
}

// Recorder for MockLogger (not exported)
type _MockLoggerRecorder struct {
	mock *MockLogger
}

func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &_MockLoggerRecorder{mock}
	return mock
}

func (_m *MockLogger) EXPECT() *_MockLoggerRecorder {
	return _m.recorder
}

func (_m *MockLogger) Info(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

func (_mr *_MockLoggerRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Info", _s...)
}

func (_m *MockLogger) Error(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Error", _s...)
}

func (_mr *_MockLoggerRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error", _s...)
}

func (_m *MockLogger) Protip(tip string, help_url string) {
	_m.ctrl.Call(_m, "Protip", tip, help_url)
}

func (_mr *_MockLoggerRecorder) Protip(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Protip", arg0, arg1)
}

// Mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *_MockRunnerRecorder
}

// Recorder for MockRunner (not exported)
type _MockRunnerRecorder struct {
	mock *MockRunner
}

func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &_MockRunnerRecorder{mock}
	return mock
}

func (_m *MockRunner) EXPECT() *_MockRunnerRecorder {
	return _m.recorder
}

func (_m *MockRunner) Run(program string, args ...string) error {
	_s := []interface{}{program}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Run", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRunnerRecorder) Run(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", _s...)
}

func (_m *MockRunner) CaptureStdout(program string, args ...string) (string, error) {
	_s := []interface{}{program}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CaptureStdout", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRunnerRecorder) CaptureStdout(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CaptureStdout", _s...)
}

// Mock of Manifest interface
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *_MockManifestRecorder
}

// Recorder for MockManifest (not exported)
type _MockManifestRecorder struct {
	mock *MockManifest
}

func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &_MockManifestRecorder{mock}
	return mock
}

func (_m *MockManifest) EXPECT() *_MockManifestRecorder {
	return _m.recorder
}

func (_m *MockManifest) DefaultVersion(depName string) (libbuildpack.Dependency, error) {
	ret := _m.ctrl.Call(_m, "DefaultVersion", depName)
	ret0, _ := ret[0].(libbuildpack.Dependency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManifestRecorder) DefaultVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultVersion", arg0)
}

func (_m *MockManifest) InstallDependency(dep libbuildpack.Dependency, outputDir string) error {
	ret := _m.ctrl.Call(_m, "InstallDependency", dep, outputDir)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManifestRecorder) InstallDependency(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallDependency", arg0, arg1)
}
