// Automatically generated by MockGen. DO NOT EDIT!
// Source: cache.go

package cache_test

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *_MockRunnerRecorder
}

// Recorder for MockRunner (not exported)
type _MockRunnerRecorder struct {
	mock *MockRunner
}

func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &_MockRunnerRecorder{mock}
	return mock
}

func (_m *MockRunner) EXPECT() *_MockRunnerRecorder {
	return _m.recorder
}

func (_m *MockRunner) Run(program string, args ...string) error {
	_s := []interface{}{program}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Run", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRunnerRecorder) Run(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", _s...)
}

// Mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerRecorder
}

// Recorder for MockLogger (not exported)
type _MockLoggerRecorder struct {
	mock *MockLogger
}

func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &_MockLoggerRecorder{mock}
	return mock
}

func (_m *MockLogger) EXPECT() *_MockLoggerRecorder {
	return _m.recorder
}

func (_m *MockLogger) Info(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

func (_mr *_MockLoggerRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Info", _s...)
}

func (_m *MockLogger) Error(format string, args ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Error", _s...)
}

func (_mr *_MockLoggerRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error", _s...)
}
